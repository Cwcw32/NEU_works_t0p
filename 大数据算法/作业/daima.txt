Skip to content
Search or jump to…

Pull requests
Issues
Marketplace
Explore
 
@Cwcw32 
Cwcw32
/
BigDataCourceHomework
1
0
0
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Settings
BigDataCourceHomework/daima.txt
@Cwcw32
Cwcw32 1
…
Latest commit 99297b8 3 hours ago
 History
 1 contributor
141 lines (122 sloc)  5.77 KB
  
package wc;

    import java.io.IOException;
    import java.util.Iterator;
    import java.util.Set;
    import java.util.StringTokenizer;
    import org.apache.hadoop.conf.Configuration;
    import org.apache.hadoop.conf.Configured;
    import org.apache.hadoop.fs.Path;
    import org.apache.hadoop.io.FloatWritable;
    import org.apache.hadoop.io.IntWritable;
    import org.apache.hadoop.io.Text;
    import org.apache.hadoop.mapreduce.Job;
    import org.apache.hadoop.mapreduce.Mapper;
    import org.apache.hadoop.mapreduce.Reducer;
    import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
    import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;
import org.apache.hadoop.util.Tool;
    import org.apache.hadoop.util.ToolRunner;
    import org.apache.log4j.Logger;
    import org.apache.hadoop.fs.*;
    //import org.apache.hadoop.conf.Configuration;
    
    
    
    public class wordcount{
	    private static final Logger LOG = Logger.getLogger(wordcount.class);

         public static void main(String[] args) throws Exception {
             Configuration conf = new Configuration();
             
             String[] otherArgs = (new GenericOptionsParser(conf, args)).getRemainingArgs();
             if(otherArgs.length < 2) {
                 System.err.println("Usage: wordcount <in> [<in>...] <out>");
                 System.exit(2);
             }
             //获得实例
             conf.set("fs.defaultFS","hdfs://Master:9000");
             String remoteDIr=otherArgs[0];//HDFSlujing 
             FileSystem fs=FileSystem.get(conf);
             Path dirPath=new Path(remoteDIr);
             RemoteIterator<LocatedFileStatus> remoteIterator=fs.listFiles(dirPath,true);
             Path outPath=new Path(otherArgs[1]);
             if(fs.exists(outPath))
             {
            	 fs.delete(outPath,true);
             }
             int w_num=0;
             while(remoteIterator.hasNext())
             {
             	FileStatus s=remoteIterator.next();
             	w_num++;
             	System.out.println(w_num);
             }
             conf.setStrings("w_num", w_num+"");
             Job job = Job.getInstance(conf, "word count");
             job.setJarByClass(wordcount.class);
             //MAP
             job.setMapperClass(wordcount.TokenizerMapper.class);
             //COMBINE
             //job.setCombinerClass(wordcount.wcCombiner.class);
             //REDUCE
             job.setReducerClass(wordcount.FloatSumReducer.class);
             //OUTPUT
             job.setOutputKeyClass(Text.class);
             job.setOutputValueClass(FloatWritable.class); 

             job.setNumReduceTasks(1);
             LOG.info(String.format("No of Reducers: %s", job.getNumReduceTasks()));
            
             for(int i = 0; i < otherArgs.length - 1; ++i) {
                 FileInputFormat.addInputPath(job, new Path(otherArgs[i]));
             }
             FileOutputFormat.setOutputPath(job, new Path(otherArgs[otherArgs.length - 1]));
             System.exit(job.waitForCompletion(true)?0:1);

             
     
        }
         
        public static class TokenizerMapper extends Mapper<Object, Text, Text, FloatWritable> {
            private static final FloatWritable times = new FloatWritable(1);
            private Text word = new Text();
            private Text a[]; 
          //  private String pathName=null;
            public TokenizerMapper() {
            	
            }
        	protected void setup(Mapper<Object, Text, Text, FloatWritable>.Context context)
    				throws IOException, InterruptedException {
    		//	FileSplit fileSplit = (FileSplit)context.getInputSplit();
    		//	pathName = fileSplit.getPath().getName();
    		}
            
            public void map(Object key, Text value, Mapper<Object, Text, Text, FloatWritable>.Context context) throws IOException, InterruptedException {
                StringTokenizer itr = new StringTokenizer(value.toString());
                while(itr.hasMoreTokens()) {
                    this.word.set(itr.nextToken());
                    String w=this.word.toString();
                    context.write(new Text(this.word), times);
                    
                }
            }
        }
        public static class wcCombiner extends Reducer<Text, FloatWritable, Text, FloatWritable> {
        	 
            @Override
            protected void reduce(Text key, Iterable<FloatWritable> values, Context context)
                    throws IOException, InterruptedException {
                float sum = 0;
         
                for (FloatWritable value : values) {
                    float count = value.get();
                    sum += count;
                }
         
                context.write(key, new FloatWritable(sum));
            }
         
        }
    public static class FloatSumReducer extends Reducer<Text, IntWritable, Text, FloatWritable> {
            private FloatWritable result = new FloatWritable();
            public FloatSumReducer() {
            }
            public void reduce(Text key, Iterable<IntWritable> values, Reducer<Text, IntWritable, Text, FloatWritable>.Context context) throws IOException, InterruptedException {
                float sum = 0;
                FloatWritable val;
                for(Iterator i$ = values.iterator(); i$.hasNext(); sum += val.get()) {
                    val = (FloatWritable)i$.next();
                }
                Configuration conf=context.getConfiguration();
                String w_num_s=conf.get("w_num");
                int w_num=Integer.parseInt(w_num_s);
                System.out.println(w_num);
                System.out.println(sum);
                this.result.set((float) (sum*(1.0)/w_num));
                context.write(key, this.result);
            }
        }
    }
© 2021 GitHub, Inc.
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About
Loading complete